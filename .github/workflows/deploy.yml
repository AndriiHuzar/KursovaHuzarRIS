name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Виконується на основній гілці

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # Клонування репозиторію
      - name: Checkout repository
        uses: actions/checkout@v3

      # Встановлення Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # Встановлення залежностей та збірка проєкту
      - name: Install and build
        run: |
          npm install
          npm run build

  build-docker:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      # Клонуємо репозиторій
      - name: Checkout code
        uses: actions/checkout@v3

      # Логін в DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Створення Docker образу
      - name: Build Docker image
        run: docker build -t your-dockerhub-username/vuejs-app:${{ github.sha }} .

      # Перевірка наявності образу в локальному сховищі
      - name: Check if image exists
        run: docker images

      # Пуш Docker образу на DockerHub
      - name: Push Docker image to DockerHub
        run: docker push your-dockerhub-username/vuejs-app:${{ github.sha }}

  run-docker-compose:
    runs-on: ubuntu-latest
    needs: build-docker

    steps:
      # Клонування репозиторію
      - name: Checkout code
        uses: actions/checkout@v3

      # Встановлення Docker Compose
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      # Створення Docker Compose файлів
      - name: Create Docker Compose files
        run: |
          echo "
          version: '3'
          services:
            vuejs-app:
              image: your-dockerhub-username/vuejs-app:${{ github.sha }}
              container_name: vuejs-app
              ports:
                - '80:80'
              depends_on:
                - prometheus
                - grafana
            prometheus:
              image: prom/prometheus:latest
              container_name: prometheus
              ports:
                - '9090:9090'
              volumes:
                - ./prometheus.yml:/etc/prometheus/prometheus.yml
            grafana:
              image: grafana/grafana:latest
              container_name: grafana
              ports:
                - '3000:3000'
              environment:
                - GF_SECURITY_ADMIN_PASSWORD=admin
              depends_on:
                - prometheus
          " > docker-compose.yml

          echo "
          global:
            scrape_interval: 15s
          scrape_configs:
            - job_name: 'vuejs-app'
              static_configs:
                - targets: ['host.docker.internal:80']
          " > prometheus.yml

      # Запуск Docker Compose
      - name: Start Docker Compose
        run: docker-compose up -d

